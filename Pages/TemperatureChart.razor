@page "/temperature-chart"
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@using System.Text.Json
@inject IJSRuntime JS

<h3>Temperature Chart</h3>
<canvas id="myChart" width="400" height="200"></canvas>

@code {
    private ChartConfiguration _chartConfig;
    private IJSObjectReference _chart;

    protected override void OnInitialized()
    {
        // Initialize the chart config
        _chartConfig = new ChartConfiguration
        {
            Type = "line",
            Data = new ChartData
            {
                Labels = new List<string>(),
                Datasets = new List<ChartDataset>
                {
                    new ChartDataset
                    {
                        Label = "Temperature",
                        Data = new List<double>(),
                        BackgroundColor = new List<string> { "rgba(75, 192, 192, 0.2)" },
                        BorderColor = new List<string> { "rgba(75, 192, 192, 1)" },
                        BorderWidth = 1
                    }
                }
            },
            Options = new { responsive = true }
        };

        Console.WriteLine($"[TempperatureChart.razor] ChartConfig: {JsonSerializer.Serialize(_chartConfig)}");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("[TemperatureChart.razor] Chart configuration initialized.");
            await JS.InvokeVoidAsync("ChartJsInterop.SetupChart", "myChart", _chartConfig);
        }
        else
        {
            Console.WriteLine($"[TemperatureChart.razor] Chart configuration on render: {_chartConfig != null}");
        }

        @* if (firstRender)
        {
            // Initialize the chart configuration here
            _chartConfig = new ChartConfiguration
            {
                Type = "line",
                Data = new ChartData
                {
                    Labels = new List<string> { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul" },
                    Datasets = new List<ChartDataset>
                    {
                        new ChartDataset
                        {
                            Label = "Temperature",
                            Data = new List<double> { 30, 25, 28, 35, 40, 42, 38 },
                            BackgroundColor = new List<string> { "rgba(75, 192, 192, 0.2)" },
                            BorderColor = new List<string> { "rgba(75, 192, 192, 1)" },
                            BorderWidth = 1
                        }
                    }
                }
            };

            await JS.InvokeVoidAsync("ChartJsInterop.SetupChart", "myChart", _chartConfig);
        } *@
    }

    @* public async Task UpdateChartAsync(string timestamp, double temperature)
    {
        // Update the chart data and labels
        _chartConfig.Data.Labels.Add(timestamp);
        var dataset = _chartConfig.Data.Datasets.First();
        dataset.Data.Add(temperature);

        // Update the chart
        await JS.InvokeVoidAsync("ChartJsInterop.UpdateChart", _chart, _chartConfig);
    } *@

    public async Task UpdateChartAsync(string timestamp, double temperature)
    {
        if (_chartConfig != null)
        {
            Console.WriteLine($"[TempperatureChart.razor->UpdateChartAsync()] ChartConfig: {JsonSerializer.Serialize(_chartConfig)}");

            Console.WriteLine($"Updating chart with temperature: {temperature} at {timestamp}");
            _chartConfig.Data.Datasets[0].Data.Add(temperature);
            _chartConfig.Data.Labels.Add(timestamp);

            Console.WriteLine($"Chart data after update: {JsonSerializer.Serialize(_chartConfig.Data)}\n\n");
            await JS.InvokeVoidAsync("ChartJsInterop.UpdateChart", "myChart", _chartConfig);
        }
        else
        {
            Console.WriteLine("[TemperatureChart.razor] Chart configuration is null.");
        }
    }



    public async ValueTask DisposeAsync()
    {
        if (_chart != null)
        {
            await _chart.DisposeAsync();
        }
    }

    public class ChartConfiguration
    {
        public string Type { get; set; }
        public ChartData Data { get; set; }
        public object Options { get; set; }
    }

    public class ChartData
    {
        public List<string> Labels { get; set; }
        public List<ChartDataset> Datasets { get; set; }
    }

    public class ChartDataset
    {
        public string Label { get; set; }
        public List<double> Data { get; set; }
        public List<string> BackgroundColor { get; set; }
        public List<string> BorderColor { get; set; }
        public int BorderWidth { get; set; }
    }

}




@* STATUS: worked, finally we got a clean starting point *@
@* @page "/temperature-chart"
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@inject IJSRuntime JS

<h3>Temperature Chart</h3>
<canvas id="myChart" width="400" height="200"></canvas>

@code {
    private ChartConfiguration _chartConfig;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Define your chart configuration here
            _chartConfig = new ChartConfiguration
            {
                Type = "line",
                Data = new ChartData
                {
                    Labels = new List<string> { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul" },
                    Datasets = new List<ChartDataset>
                    {
                        new ChartDataset
                        {
                            Label = "Temperature",
                            Data = new List<double> { 30, 25, 28, 35, 40, 42, 38 },
                            BackgroundColor = new List<string> { "rgba(75, 192, 192, 0.2)" },
                            BorderColor = new List<string> { "rgba(75, 192, 192, 1)" },
                            BorderWidth = 1
                        }
                    }
                }
            };

            await JS.InvokeVoidAsync("ChartJsInterop.SetupChart", "myChart", _chartConfig);
        }
    }
    public class ChartConfiguration
    {
        public string Type { get; set; }
        public ChartData Data { get; set; }
        public object Options { get; set; }
    }

    public class ChartData
    {
        public List<string> Labels { get; set; }
        public List<ChartDataset> Datasets { get; set; }
    }

    public class ChartDataset
    {
        public string Label { get; set; }
        public List<double> Data { get; set; }
        public List<string> BackgroundColor { get; set; }
        public List<string> BorderColor { get; set; }
        public int BorderWidth { get; set; }
    }
} *@








@* @using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@inject IJSRuntime JS


<ChartJsLineChart 
    @ref="_lineChartJs" 
    Config="@_lineConfig" 
    Width="100" 
    Height="50" />

@code {
    private class WeightEntry
    {
        public DateTime Date { get; set; }
        public double Weight { get; set; }
    }

    private List<WeightEntry> colFatSecretWeightOutput = new List<WeightEntry>();

    LineConfig _lineConfig;
    ChartJsLineChart _lineChartJs;
    private LineDataset<TimeTuple<int>> _WeightDataSet;
    private bool _isRendered;

    protected override async Task OnInitializedAsync()
    {
        // Sample data initialization
        colFatSecretWeightOutput = new List<WeightEntry>
        {
            new WeightEntry { Date = DateTime.Now.AddDays(-5), Weight = 70.5 },
            new WeightEntry { Date = DateTime.Now.AddDays(-4), Weight = 70.0 },
            new WeightEntry { Date = DateTime.Now.AddDays(-3), Weight = 69.8 },
            new WeightEntry { Date = DateTime.Now.AddDays(-2), Weight = 69.7 },
            new WeightEntry { Date = DateTime.Now.AddDays(-1), Weight = 69.6 },
            new WeightEntry { Date = DateTime.Now, Weight = 69.5 }
        };

        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Weight Chart"
                },
                Legend = new Legend
                {
                    Display = false
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Weight"
                            }
                        }
                    },
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Day,
                                TooltipFormat = "MM.DD.YYYY",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        _WeightDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Label = "Weight per Day",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };

        _WeightDataSet.AddRange(colFatSecretWeightOutput
            .Select(p => new TimeTuple<int>(new Moment(p.Date), Convert.ToInt32(p.Weight))));
        _lineConfig.Data.Datasets.Add(_WeightDataSet);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true;
            UpdateChart();
        }
    }

    private void UpdateChart()
    {
        if (_isRendered && _lineChartJs != null)
        {
            _lineChartJs.Update();
        }
    }
} *@








@* @page "/temperature-chart"
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@inject IJSRuntime JS

<ChartJsLineChart Config="_lineConfig" />

@code {
    private ChartJsLineChart lineChart;
    private LineConfig _lineConfig;
    private LineDataset<string> _dataset;

    private List<double> temperatures = new();
    private List<string> timestamps = new();

    protected override async Task OnInitializedAsync()
    {
        // Initialize dataset
        _dataset = new LineDataset<string>
        {
            Label = "Temperature",
            Data = new List<string>(),
            Fill = false,
            BorderColor = ColorUtil.ColorHexString(75, 192, 192),
            LineTension = 0.1
        };

        // Initialize config
        _lineConfig = new LineConfig
        {
            Data = new LineData
            {
                Labels = new List<string>(),
                Datasets = new List<LineDataset<string>> { _dataset }
            },
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Temperature Chart"
                },
                Scales = new Scales
                {
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                Display = true,
                                LabelString = "Temperature (°C)"
                            }
                        }
                    },
                    XAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Second,
                                TooltipFormat = "HH:mm:ss",
                                DisplayFormats = new Dictionary<TimeMeasurement, string>
                                {
                                    { TimeMeasurement.Second, "HH:mm:ss" }
                                }
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                Display = true,
                                LabelString = "Time"
                            }
                        }
                    }
                }
            }
        };

        // SignalR connection and message handling
        // Add your SignalR setup code here
    }

    private void HandleMessage(string json)
    {
        // Deserialize and update the chart data
        // Assuming json contains temperature and timestamp data

        var data = System.Text.Json.JsonSerializer.Deserialize<TemperatureData>(json);
        temperatures.Add(data.Temperature);
        timestamps.Add(data.Timestamp);

        _lineConfig.Data.Labels.Clear();
        _lineConfig.Data.Labels.AddRange(timestamps);
        _dataset.Data.Clear();
        _dataset.Data.AddRange(temperatures.Select(t => t.ToString()));

        // Trigger chart update
        lineChart?.Update();
    }

    private class TemperatureData
    {
        public double Temperature { get; set; }
        public string Timestamp { get; set; }
    }
} *@
